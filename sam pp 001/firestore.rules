rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to validate basic user data
    function isValidUserData(userData) {
      return userData.size() <= 10 && 
        userData.email is string &&
        userData.displayName is string &&
        (!('role' in userData) || userData.role == 'user');
    }
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == userId && 
        isValidUserData(request.resource.data);
      allow update: if request.auth != null && 
        (request.auth.uid == userId || isAdmin()) && 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['fcmToken', 'displayName', 'email']) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Courses
    match /courses/{courseId} {
      allow read: if true;
      allow write: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'description', 'createdAt']) && 
        request.resource.data.title is string && 
        request.resource.data.description is string && 
        request.resource.data.createdAt is timestamp;
    }
    
    // Jobs
    match /jobs/{jobId} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.resource.data.keys().hasAll(['title', 'description', 'postedBy', 'createdAt']) && 
        request.resource.data.postedBy == request.auth.uid;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.postedBy || isAdmin()) && 
        request.resource.data.postedBy == resource.data.postedBy;
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.postedBy || isAdmin());
    }
    
    // Resources
    match /resources/{resourceId} {
      allow read: if true;
      allow write: if isAdmin() && 
        request.resource.data.keys().hasAll(['title', 'description', 'url', 'createdAt']) && 
        request.resource.data.title is string && 
        request.resource.data.url is string;
    }
    
    // Donations
    match /donations/{donationId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || isAdmin());
      allow create: if request.auth != null && 
        request.resource.data.keys().hasAll(['amount', 'userId', 'createdAt']) && 
        request.resource.data.userId == request.auth.uid && 
        request.resource.data.amount > 0;
      allow update: if false;
      allow delete: if isAdmin();
    }
    
    // Partners
    match /partners/{partnerId} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.resource.data.keys().hasAll(['name', 'description', 'website', 'createdAt']) && 
        request.resource.data.name is string && 
        request.resource.data.website is string;
      allow update: if isAdmin() && 
        request.resource.data.keys().hasAll(['name', 'description', 'website', 'updatedAt']);
      allow delete: if isAdmin();
    }
  }
}